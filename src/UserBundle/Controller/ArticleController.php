<?php
/**
 * Created by PhpStorm.
 * User: LENOVO
 * Date: 01/05/2018
 * Time: 12:19
 */

namespace UserBundle\Controller;


use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

use UserBundle\Entity\Article;
use UserBundle\Entity\Imagearticle;

class ArticleController extends Controller
{
    public function showAction(Request $request)
    {


        $em = $this->getDoctrine()->getManager();
        $articles = $em->getRepository("UserBundle:Article")
            ->findAllarticle();

        /**
         * @var $paginator \Knp\Component\Pager\Paginator
         */
        $paginator = $this->get('knp_paginator');
        $result = $paginator->paginate(
            $articles,
            $request->query->getInt('page', 1),
            $request->query->getInt('limit', 2)
        );

        return $this->render("UserBundle:Article:liste.html.twig", array(
            'articles' => $result,
        ));
    }

    public function detailsAction(Article $article)
    {

        return $this->render("UserBundle:Article:details.html.twig",
            array(
                'articles' => $article
            ));


    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function ajouterAction(Request $request)
    {
        $article = new Article();
        if ($request->isMethod('post')) {
            $em = $this->getDoctrine()->getManager();

            $article->setValidation(0);
            $article->setDate(new \DateTime());
            $article->setTitre($request->get('titre'));
            $article->setContenu($request->get('contenu'));
            $article->setCategorie($request->get('categorie'));
            $article->setUtilisateur($this->getUser());
            $em->persist($article);

            $em->flush();

            $path = $this->get('kernel')->getRootDir() . '/../web/images/images_article';
            $files = $request->files->get('article_image');

            foreach ($files as $file) {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                $file->move($path, $fileName);
                $articleImage = new Imagearticle();
                $articleImage->setIdArticle($article);
                $articleImage->setLien($fileName);

                $em->persist($articleImage);
                $em->flush();
            }

            return $this->redirectToRoute("article_show");
        }
        return $this->render("UserBundle:Article:ajout.html.twig");
    }

    public function rechercherAction(Request $request)
    {
        $cat = $request->get("categorie");
        $em = $this->getDoctrine()->getManager();
        $articles = $em->getRepository('UserBundle:Article')->findarticle($cat);
        /**
         * @var $paginator \Knp\Component\Pager\Paginator
         */
        $paginator = $this->get('knp_paginator');
        $result = $paginator->paginate(
            $articles,
            $request->query->getInt('page', 1),
            $request->query->getInt('limit', 6)
        );
        return $this->render("UserBundle:Article:liste.html.twig", array(
            'articles' => $result,));

    }


    public function editAction(Request $request)
    {

        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();
        $article = $em->getRepository("UserBundle:Article")->find($id);


        if ($request->isMethod('post')) {

            $article->setDate(new \DateTime());
            $article->setCategorie($request->get('categorie'));
            $article->setContenu($request->get('contenu'));
            $article->setTitre($request->get('titre'));

            $em->persist($article);

            $em->flush();


            return $this->redirectToRoute("article_show");
        }


        return $this->render("UserBundle:Article:update.html.twig", array(
            "article" => $article,
        ));

    }

    public function majvalidation(Request $request)
    {
        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository("UserBundle:Article")->find($id);
        $Article->setValidation(1);
        $em->flush();
        return $this->redirectToRoute("article_show");
    }


    public function articleuserAction(Request $request)
    {
        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();

        $user = $em->getRepository('UserBundle:Utilisateur')->findBy(array("id" => $id));

        $articles = $em->getRepository('UserBundle:Article')->findBy(array('utilisateur' => $this->getUser()));
        return $this->render('UserBundle:Article:articleuser.html.twig',
            array(
                'articles' => $articles,
                'user' => $user
            )
        );
    }

    public function jsonarticleAction()
    {
        $em = $this->getDoctrine()->getManager();
        $articles = $em->getRepository("UserBundle:Article")
            ->findAll();
        $normalizer = new ObjectNormalizer();
        $normalizer->setCircularReferenceLimit(1);
        $normalizer->setCircularReferenceHandler(function ($object) {
            return $object->getId();
        });
        $serializer = new Serializer([$normalizer]);
        $formatted = $serializer->normalize($articles);
        return new JsonResponse($formatted);
    }

    public function jsonaddAction(Request $request)
    {


        $em = $this->getDoctrine()->getManager();

            $articl=new Article();
            $articl->setValidation(0);
            $articl->setDate(new \DateTime());
            $articl->setTitre($request->get('titre'));
            $articl->setContenu($request->get('contenu'));
            $articl->setCategorie($request->get('categorie'));
            $em->persist($articl);
            $em->flush();

           $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(1);
            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $serializer = new Serializer([new ObjectNormalizer()]);
            $formatted = $serializer->normalize($articl);

        return new JsonResponse($formatted);
    }

    public function articleuserjsonAction(Request $request)
    {
        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();

        $user = $em->getRepository('UserBundle:Utilisateur')->findBy(array("id" => $id));

        $articles = $em->getRepository('UserBundle:Article')->findBy(array('utilisateur' => $this->getUser()));
        $normalizer = new ObjectNormalizer();
        $normalizer->setCircularReferenceLimit(1);
        $normalizer->setCircularReferenceHandler(function ($object) {
            return $object->getId();
        });
        $serializer = new Serializer([$normalizer]);
        $formatted = $serializer->normalize($articles);
        return new JsonResponse($formatted);
    }
}

